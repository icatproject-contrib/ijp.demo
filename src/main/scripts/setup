#!/usr/bin/env python
from setup_utils import *
import os
import fileinput

# ijp.batch.scripts

manifest_name = "installed_files.txt"

def uninstall(preInstall=False):
    # We could remove precisely those jobtypes / scripts that are defined here,
    # but should not remove any others added by other means;
    # and since the set of jobtypes here might change over time, we'd have to record the names of those we install.
    # Might do that in future; for now, uninstall is a no-op.
    if os.path.exists(manifest_name):
        mf = open(manifest_name)
        for line in mf:
            line = line.strip()
            if actions.verbosity:
                print "Removing " + line
            try:
                os.remove(os.path.normpath(line))
            except Exception, e:
                if actions.verbosity:
                    # File has probably been removed by something else - fine by us
                    print "Exception " + str(e) + " when trying to remove " + line + "; will ignore."
        mf.close()
        os.remove(manifest_name)
    else:
      if actions.verbosity:
          print "No manifest found for any previous installation, assuming nothing to uninstall."
      if preInstall:
          print "Any existing jobtypes/scripts of the same names will be overwritten."
      else:
          print "Any existing Jobtypes/scripts will not be removed from their respective installation folders; must be uninstalled manually."

def substProps( filename, propsList ):
    """
    Replace refs to ${prop_name} in file with props[prop_name].
    """
    for line in fileinput.input( filename,inplace=True):
        for prop in propsList:
            line = line.replace( "${"+prop+"}", props[prop])
        # This adds an extra space to the end of the line, but for now we don't care!
        print line,


prop_name = "setup.properties"
# Note: setup_utils insists that container/home/secure/port should be set, though we may not use them
optional_prop_list = ['container','home','secure','port', 'ijp.scripts.dir','executable.path','ijp.jobtypes.dir']
mandatory_prop_list = ["facility.name","data.format.name","data.format.version","dataset.type.1","dataset.type.2"]
# Properties to replace in jobtype files
jobtype_props = ["dataset.type.1","dataset.type.2","executable.path"]
# Properties to replace in the icat_defs.py script
script_props = ["facility.name","data.format.name","data.format.version"]

actions, arg, props = getActions( prop_name, mandatory_prop_list )

if arg in ["CONFIGURE", "INSTALL"]:
    # Check that at least one of the alternative option-sets is set
    # ... but at least one of them must be set
    if (not props['container'] == 'Glassfish') and (not 'ijp.scripts.dir' in props):
        abort("At least one of Glassfish or ijp.scripts.dir must be specified in " + prop_name)
    # if executable.path is not set, set it to the empty string
    if not 'executable.path' in props:
        props['executable.path'] = ''
    actions.checkNoErrors()
    
if arg == "INSTALL":   
    
    mf = None
    
    try:
        uninstall(preInstall=True)
        
        mf = open(manifest_name,'w')
        
        jobtypeDirs = []
        if 'ijp.jobtypes.dir' in props:
            jobtypeDirs.append(props['ijp.jobtypes.dir'])
            
        # if glassfish is defined, copy jobtypes/*.xml to domainN/config/ijp/job_types there
        if 'container' in props and props['container'] == 'Glassfish':
            # Get config_path from home and the domain
            config_path = os.path.join(props["home"], "glassfish", "domains", actions.domain, "config")
            jobtypes_dir = os.path.join(config_path,'ijp/job_types')
            jobtypeDirs.append(jobtypes_dir)
            
        for jobtypes_dir in jobtypeDirs:
            for file in glob.glob("job_types/*.xml"):
                shutil.copy(file,jobtypes_dir)
                filename = os.path.basename(file)
                mf.write(os.path.join(jobtypes_dir,filename)+'\n')
                if actions.verbosity:
                    print "Added " + filename + " to " + jobtypes_dir
                # Substitute dataset types, if any
                if actions.verbosity:
                    print "Replacing any dataset type references in " + filename
                substProps(os.path.join(jobtypes_dir,filename),jobtype_props)
                
        # if ijp.scripts.dir is defined, copy {bash,python}/* to there
        if 'ijp.scripts.dir' in props:
            scripts_dir = os.path.normpath(props['ijp.scripts.dir'])
            for file in glob.glob("bash/*"):
                shutil.copy(file,scripts_dir)
                mf.write(os.path.join(scripts_dir,os.path.basename(file))+'\n')
                if actions.verbosity:
                    print "Added " + file + " to " + scripts_dir
            for file in glob.glob("python/*"):
                shutil.copy(file,scripts_dir)
                mf.write(os.path.join(scripts_dir,os.path.basename(file))+'\n')
                if actions.verbosity:
                    print "Added " + file + " to " + scripts_dir
            # Substitute facility and data format in icat_defs.py
            try:
                if actions.verbosity:
                    print "Replacing property references in icat_defs.py..."
                substProps(os.path.join(props['ijp.scripts.dir'],"icat_defs.py"),script_props)
            except Exception, e:
                abort(str(e))
        
        mf.close()
                    
    except Exception, e:
        if mf:
            mf.close()
        abort(str(e))
               
if arg == "UNINSTALL":
    
    try:
        uninstall()
    except Exception, e:
        abort(str(e))       
